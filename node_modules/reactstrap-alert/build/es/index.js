import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import ReactDOM from 'react-dom';
import isString from 'lodash/isString';
import locale from './locale/ru-RU';
import { PromptModal } from './PromptModal';
import { BaseModal } from './BaseModal';
var DESTROY_TIMEOUT = 600;

function parseArgs(obj) {
  var params = _extends({}, locale);

  if (obj.locale) {
    try {
      var loadedLocale = require("./locale/" + obj.locale);

      params = _extends({}, params, {}, loadedLocale.default);
    } catch (e) {
      throw new Error("Locale " + obj.locale + " not found");
    }
  }

  if (isString(obj)) {
    params.message = obj;
  } else {
    params = _extends({}, params, {}, obj);
  }

  return params;
}

function BaseRender(_x, _x2) {
  return _BaseRender.apply(this, arguments);
}
/**
 *
 * @param {string} obj.locale
 * @param {string} obj.title
 * @param {string} obj.message
 *
 * @param obj.modalProps {object} Props for <Modal/>
 * @param obj.modalHeaderProps {object} Props for <ModalHeader/>
 * @param obj.modalBodyProps {object} Props for <ModalBody/>
 * @param obj.modalFooterProps {object} Props for <ModalFooter/>
 *
 * @param obj.confirmColor {string} color for confirm button (see https://reactstrap.github.io/components/buttons/)
 * @param obj.cancelColor {string} color for confirm button (see https://reactstrap.github.io/components/buttons/)
 *
 * @param obj.confirmText {string} text for confirm button - The standard value is created from the localization
 * @param obj.cancelText {string} text for cancel button - The standard value is created from the localization
 * @returns {Promise<boolean>}
 */


function _BaseRender() {
  _BaseRender = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee(params, ReactEl) {
    var element;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            element = document.body.appendChild(document.createElement('div'));
            return _context.abrupt("return", new Promise(function (done, reject) {
              try {
                var onResolve = function onResolve(value) {
                  done(value);
                  setTimeout(function () {
                    ReactDOM.unmountComponentAtNode(element);
                    element.remove();
                  }, DESTROY_TIMEOUT);
                };

                ReactDOM.render(React.createElement(ReactEl, _extends({}, params, {
                  resolve: onResolve
                })), element);
              } catch (e) {
                reject(e);
              }
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _BaseRender.apply(this, arguments);
}

export function Confirm(_x3) {
  return _Confirm.apply(this, arguments);
}
/**
 *
 * @param {string} obj.locale
 * @param {string} obj.title
 * @param {string} obj.message
 *
 * @param obj.modalProps {object} Props for <Modal/>
 * @param obj.modalHeaderProps {object} Props for <ModalHeader/>
 * @param obj.modalBodyProps {object} Props for <ModalBody/>
 * @param obj.modalFooterProps {object} Props for <ModalFooter/>
 *
 * @param obj.confirmColor {string} color for confirm button (see https://reactstrap.github.io/components/buttons/)
 *
 * @param obj.confirmText {string} text for confirm button - The standard value is created from the localization
 * @returns {Promise<boolean>} always return true
 */

function _Confirm() {
  _Confirm = _asyncToGenerator(
  /*#__PURE__*/
  _regeneratorRuntime.mark(function _callee2(obj) {
    var params;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            params = parseArgs(obj);
            return _context2.abrupt("return", BaseRender(params, BaseModal));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _Confirm.apply(this, arguments);
}

export function Alert(obj) {
  var params = parseArgs(obj);
  params.cancelText = null;
  return Confirm(params);
}
/**
 *
 * @param {string} obj.locale
 * @param {string} obj.title
 * @param {string} obj.message
 *
 * @param obj.modalProps {object} Props for <Modal/>
 * @param obj.modalHeaderProps {object} Props for <ModalHeader/>
 * @param obj.modalBodyProps {object} Props for <ModalBody/>
 * @param obj.modalFooterProps {object} Props for <ModalFooter/>
 * @param obj.inputProps {object} Props for <Input/>
 *
 * @param obj.confirmColor {string} color for confirm button (see https://reactstrap.github.io/components/buttons/)
 * @param obj.cancelColor {string} color for confirm button (see https://reactstrap.github.io/components/buttons/)
 *
 * @param obj.confirmText {string} text for confirm button - The standard value is created from the localization
 * @param obj.cancelText {string} text for cancel button - The standard value is created from the localization
 * @returns {Promise<string>}
 */

export function Prompt(obj) {
  var params = parseArgs(obj);
  return BaseRender(params, PromptModal);
}
export { Alert as AlertModal, Confirm as ConfirmModal, Prompt as PromptModal };