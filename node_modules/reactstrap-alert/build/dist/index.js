"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConfirmModal = exports.Confirm = Confirm;
exports.AlertModal = exports.Alert = Alert;
exports.PromptModal = exports.Prompt = Prompt;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _ruRU = _interopRequireDefault(require("./locale/ru-RU"));

var _PromptModal = require("./PromptModal");

var _BaseModal = require("./BaseModal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DESTROY_TIMEOUT = 600;

function parseArgs(obj) {
  var params = _objectSpread({}, _ruRU["default"]);

  if (obj.locale) {
    try {
      var loadedLocale = require("./locale/".concat(obj.locale));

      params = _objectSpread({}, params, {}, loadedLocale["default"]);
    } catch (e) {
      throw new Error("Locale ".concat(obj.locale, " not found"));
    }
  }

  if ((0, _isString["default"])(obj)) {
    params.message = obj;
  } else {
    params = _objectSpread({}, params, {}, obj);
  }

  return params;
}

function BaseRender(_x, _x2) {
  return _BaseRender.apply(this, arguments);
}
/**
 *
 * @param {string} obj.locale
 * @param {string} obj.title
 * @param {string} obj.message
 *
 * @param obj.modalProps {object} Props for <Modal/>
 * @param obj.modalHeaderProps {object} Props for <ModalHeader/>
 * @param obj.modalBodyProps {object} Props for <ModalBody/>
 * @param obj.modalFooterProps {object} Props for <ModalFooter/>
 *
 * @param obj.confirmColor {string} color for confirm button (see https://reactstrap.github.io/components/buttons/)
 * @param obj.cancelColor {string} color for confirm button (see https://reactstrap.github.io/components/buttons/)
 *
 * @param obj.confirmText {string} text for confirm button - The standard value is created from the localization
 * @param obj.cancelText {string} text for cancel button - The standard value is created from the localization
 * @returns {Promise<boolean>}
 */


function _BaseRender() {
  _BaseRender = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(params, ReactEl) {
    var element;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            element = document.body.appendChild(document.createElement('div'));
            return _context.abrupt("return", new Promise(function (done, reject) {
              try {
                var onResolve = function onResolve(value) {
                  done(value);
                  setTimeout(function () {
                    _reactDom["default"].unmountComponentAtNode(element);

                    element.remove();
                  }, DESTROY_TIMEOUT);
                };

                _reactDom["default"].render(_react["default"].createElement(ReactEl, _extends({}, params, {
                  resolve: onResolve
                })), element);
              } catch (e) {
                reject(e);
              }
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _BaseRender.apply(this, arguments);
}

function Confirm(_x3) {
  return _Confirm.apply(this, arguments);
}
/**
 *
 * @param {string} obj.locale
 * @param {string} obj.title
 * @param {string} obj.message
 *
 * @param obj.modalProps {object} Props for <Modal/>
 * @param obj.modalHeaderProps {object} Props for <ModalHeader/>
 * @param obj.modalBodyProps {object} Props for <ModalBody/>
 * @param obj.modalFooterProps {object} Props for <ModalFooter/>
 *
 * @param obj.confirmColor {string} color for confirm button (see https://reactstrap.github.io/components/buttons/)
 *
 * @param obj.confirmText {string} text for confirm button - The standard value is created from the localization
 * @returns {Promise<boolean>} always return true
 */


function _Confirm() {
  _Confirm = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(obj) {
    var params;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            params = parseArgs(obj);
            return _context2.abrupt("return", BaseRender(params, _BaseModal.BaseModal));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _Confirm.apply(this, arguments);
}

function Alert(obj) {
  var params = parseArgs(obj);
  params.cancelText = null;
  return Confirm(params);
}
/**
 *
 * @param {string} obj.locale
 * @param {string} obj.title
 * @param {string} obj.message
 *
 * @param obj.modalProps {object} Props for <Modal/>
 * @param obj.modalHeaderProps {object} Props for <ModalHeader/>
 * @param obj.modalBodyProps {object} Props for <ModalBody/>
 * @param obj.modalFooterProps {object} Props for <ModalFooter/>
 * @param obj.inputProps {object} Props for <Input/>
 *
 * @param obj.confirmColor {string} color for confirm button (see https://reactstrap.github.io/components/buttons/)
 * @param obj.cancelColor {string} color for confirm button (see https://reactstrap.github.io/components/buttons/)
 *
 * @param obj.confirmText {string} text for confirm button - The standard value is created from the localization
 * @param obj.cancelText {string} text for cancel button - The standard value is created from the localization
 * @returns {Promise<string>}
 */


function Prompt(obj) {
  var params = parseArgs(obj);
  return BaseRender(params, _PromptModal.PromptModal);
}